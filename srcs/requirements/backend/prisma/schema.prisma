// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userID           String         @id @default(uuid())
  oauth            String         @unique
  avatar           String         @default("default.jpeg")
  userName         String?        @unique
  email            String?        @unique
  secret2FA        String?        @unique
  auth2FA_id       String?        @unique
  finishedProfile  Boolean        @default(false)
  userOnline       Boolean        @default(false)
  userInGame       Boolean        @default(false)
  is2FA            Boolean        @default(false)
  creationTime     DateTime       @default(now())
  updateTime       DateTime       @updatedAt
  P1               Games[]        @relation("Player1")
  P2               Games[]        @relation("Player2")
  Achievements     Achievements[]
  Tokens           TokensR[]      @relation("Refresh")
  Friendship1      Friendship[]   @relation("Friendship1")
  Friendship2      Friendship[]   @relation("Friendship2")
  receivedRequests FriendshipRequest[] @relation("Received")
  sentRequests     FriendshipRequest[] @relation("Sent")
}

model TokensR {
  tokenID      String   @id @unique
  userID       String
  creationDate DateTime @default(now())
  updateDate   DateTime @updatedAt
  userRelation User     @relation(name: "Refresh", fields: [userID], references: [userID])
}

model Games {
  gameID      String  @id @default(uuid())
  player1ID   String
  player2ID   String
  winnerID    String?
  scoreP1     Int     @default(0)
  scoreP2     Int     @default(0)
  specialMode Boolean @default(false)
  P1          User    @relation(name: "Player1", fields: [player1ID], references: [userID])
  P2          User    @relation(name: "Player2", fields: [player2ID], references: [userID])
}

model Achievements {
  achievementID String   @id @default(uuid())
  prizeAID      String
  userAID       String
  creationTime  DateTime @default(now())
  updateAt      DateTime @updatedAt
  prizesWon     Prize    @relation(fields: [prizeAID], references: [prizeID])
  User          User     @relation(fields: [userAID], references: [userID])
}

model Prize {
  prizeID      String         @id @default(uuid())
  Description  String?
  prizeImg     String
  prizeminimum Int
  Connection   Achievements[]
}

model Friendship {
  friendshipID     String           @id @default(uuid())
  user1ID          String
  user2ID          String
  creationTime     DateTime         @default(now())
  friendshipStatus FriendshipStatus
  user1            User             @relation(name: "Friendship1", fields: [user1ID], references: [userID])
  user2            User             @relation(name: "Friendship2", fields: [user2ID], references: [userID])
}

model FriendshipRequest {
  requestID    String                  @id @default(uuid())
  senderID     String
  receiverID   String
  status       FriendshipRequestStatus
  type         RequestType
  ifGameType   Mode?                   @default(REGULAR)
  creationTime DateTime                @default(now())
  receiver     User                    @relation("Received", fields: [receiverID], references: [userID])
  sender       User                    @relation("Sent", fields: [senderID], references: [userID])

}

model Room {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String
  type      RoomType
  password  String?
  ownerId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //   members        User[]           @relation("member")
  messages       Message[]
  RoomMembership RoomMembership[]
}

model RoomMembership {
  userId    Int      @id
  roomId    Int
  role      RoomRole
  createdAt DateTime @default(now())

  room Room @relation(fields: [roomId], references: [id])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  senderId  Int
  roomId    Int
  createdAt DateTime @default(now())

  room Room @relation(fields: [roomId], references: [id])
}

model DirectMessage {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String
  createdAt  DateTime @default(now())
}

enum RoomType {
  PUBLIC
  PRIVATE
  PASSWORD_PROTECTED
}

enum RoomRole {
  OWNER
  ADMIN
  MEMBER
}

enum FriendshipRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum FriendshipStatus {
  FRIENDS
  BLOCKED
}

enum RequestType {
  GAME
  FRIENDSHIP
}

enum Mode {
  REGULAR
  SUPER
}
