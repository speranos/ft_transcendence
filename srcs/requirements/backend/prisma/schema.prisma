// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  memberInRooms RoomMembership[]
  // friends              User[]               @relation("friends")
  // ownedRooms           Room[]               @relation("owner")
  // adminInRooms         Room[]               @relation("admin")
  // blockedUsers         User[]               @relation("blocked")
  // sentFriendRequests   FriendshipRequest[] @relation("sentRequests", references: [id])
  // receivedFriendRequests FriendshipRequest[] @relation("receivedRequests", references: [id])
}

model Room {
  id        Int      @id @default(autoincrement())
  name      String
  type      RoomType
  password  String?
  ownerId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // ... other room-related fields

  // Relationships
  // owner       User     @relation("owner", fields: [ownerId], references: [id])
  // admins      User[]   @relation("admin", references: [id])
  // members     User[]   @relation("member", references: [id])
  // messages    Message[]
  RoomMembership RoomMembership[]
}

model RoomMembership {
  userId    Int      @id
  roomId    Int
  role      RoomRole
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id])
  room Room @relation(fields: [roomId], references: [id])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  senderId  Int
  roomId    Int
  createdAt DateTime @default(now())

  // Relationships
  //   sender    User @relation(fields: [senderId], references: [id])
  //   room      Room @relation(fields: [roomId], references: [id])
}

model FriendshipRequest {
  id         Int                     @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     FriendshipRequestStatus
  createdAt  DateTime                @default(now())

  // sender       User @relation("sentRequests", fields: [senderId], references: [id])
  // receiver     User @relation("receivedRequests", fields: [receiverId], references: [id])
}

enum FriendshipRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum RoomType {
  PUBLIC
  PRIVATE
  PASSWORD_PROTECTED
}

enum RoomRole {
  OWNER
  ADMIN
  MEMBER
}
